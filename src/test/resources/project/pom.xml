<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2020 Alexander Kapitman
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>ru.akman.maven.plugins</groupId>
  <artifactId>jlink-maven-plugin-test</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>jlink-maven-plugin Unit Tests</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>ru.akman.maven.plugins</groupId>
        <artifactId>jlink-maven-plugin</artifactId>
        <version>0.1.0-SNAPSHOT</version>
        <configuration>

          <!-- BASIC -->

          <!--
            Specifies the module path. The path where the jlink tool discovers
            observable modules: modular JAR files, JMOD files, exploded modules.
            If this option is not specified, then the default module path
            is $JAVA_HOME/jmods. This directory contains the java.base module
            and the other standard and JDK modules. If this option is specified
            but the java.base module cannot be resolved from it, then
            the jlink command appends $JAVA_HOME/jmods to the module path.

            pathelements - passed to jlink as is
            filesets - sets of files (without directories)
            dirsets - sets of directories (without files)
            dependencysets - sets of dependencies with specified includes and
                             excludes patterns (glob: or regex:) for file names
                             and regex patterns only for module names
          -->
          <modulepath>
            <pathelements>
              <pathelement>mod.jar</pathelement>
              <pathelement>mod.jmod</pathelement>
              <pathelement>mods/exploded/mod</pathelement>
            </pathelements>
            <filesets>
              <fileset>
                <directory>${project.build.directory}</directory>
                <includes>
                  <include>**/*</include>
                </includes>
                <excludes>
                  <exclude>**/*Empty.jar</exclude>
                  <exclude>jlink.opts</exclude>
                  <exclude>jlink-opts</exclude>
                </excludes>
                <followSymlinks>false</followSymlinks>
              </fileset>
            </filesets>
            <dirsets>
              <dirset>
                <directory>target</directory>
                <includes>
                  <include>**/*</include>
                </includes>
                <excludes>
                  <exclude>**/*Test</exclude>
                </excludes>
                <followSymlinks>true</followSymlinks>
              </dirset>
            </dirsets>
            <dependencysets>
              <dependencyset>
                <includes>
                  <include>glob:**/*.jar</include>
                  <include>regex:foo-(bar|baz)-.*?\.jar</include>
                </includes>
                <includenames>
                  <includename>.*</includename>
                </includenames>
                <excludes>
                  <exclude>glob:**/javafx.*Empty</exclude>
                </excludes>
                <excludenames>
                  <excludename>javafx\..+Empty</excludename>
                </excludenames>
              </dependencyset>
            </dependencysets>
          </modulepath>
          <!--
            Specifies the modules names (names of root modules) to add to
            the runtime image. Their transitive dependencies will add too.
          -->
          <addmodules>
            <addmodule>java.base</addmodule>
            <addmodule>org.example.rootmodule</addmodule>
          </addmodules>
          <!--
            Specifies the location of the generated runtime image.
            Default value: ${project.build.directory}/runtime.
          -->
          <output>${project.build.directory}/runtime</output>
          <!--
            Limits the universe of observable modules to those in
            the transitive closure of the named modules, mod,
            plus the main module, if any, plus any further
            modules specified in the "addmodules" property.
            It used to limit resolve any services other than
            the selected services, if the property "bindservices"
            set to true.
          -->
          <limitmodules>
            <limitmodule>java.base</limitmodule>
            <limitmodule>org.example.limitmodule</limitmodule>
          </limitmodules>
          <!--
            Suggest providers that implement the given service types
            from the module path.
          -->
          <suggestproviders>
            <suggestprovider>provider.name</suggestprovider>
          </suggestproviders>
          <!--
            Save jlink options in the given file.
          -->
          <saveopts>${project.build.directory}/jlink-opts</saveopts>
          <!--
            The last plugin allowed to sort resources.
          -->
          <resourceslastsorter>resource-sorter-name</resourceslastsorter>
          <!--
            Post process an existing image.
          -->
          <postprocesspath>${project.build.directory}/imagefile</postprocesspath>
          <!--
            Enable verbose tracing.
            Default value: false.
          -->
          <verbose>true</verbose>
          <!--
            Link service provider modules and their dependencies.
            Default value: false.
          -->
          <bindservices>true</bindservices>
          <!--
            Specifies the launcher command name for the module or
            the command name for the module and main class (the module and
            the main class names are separated by a slash).
          -->
          <launcher>
            <command>myLauncher</command>
            <mainmodule>mainModule</mainmodule>
            <mainclass>mainClass</mainclass>
          </launcher>
          <!--
            Excludes header files.
            Default value: false.
          -->
          <noheaderfiles>true</noheaderfiles>
          <!--
            Excludes man pages.
            Default value: false.
          -->
          <nomanpages>true</nomanpages>
          <!--
            Specifies the byte order of the generated
            image { NATIVE | LITTLE | BIG }.
            Default value: NATIVE (the format of your system's architecture).
          -->
          <endian>LITTLE</endian>
          <!--
            Suppresses a fatal error when signed modular JARs are linked
            in the runtime image. The signature-related files of the signed
            modular JARs aren't copied to the runtime image.
            Default value: false.
          -->
          <ignoresigninginformation>true</ignoresigninginformation>
          <!--
            Disables the specified plug-ins.
            For a complete list of all available plug-ins,
            run the command: jlink ‒‒list-plugins
          -->
          <disableplugins>
            <disableplugin>compress</disableplugin>
            <disableplugin>dedup-legal-notices</disableplugin>
          </disableplugins>

          <!-- PLUGINS -->
          <!--
            For plug-in options that require a pattern-list, the value is
            a comma-separated list of elements, with each element using one
            the following forms:

              - glob-pattern
              - glob:glob-pattern
              - regex:regex-pattern
              - @filename
              
            Example: **/module-info.class,glob:/java.base/java/lang/**
          -->

          <!--
            Compresses all resources in the output image. Specify
            compression { NO_COMPRESSION | CONSTANT_STRING_SHARING | ZIP }.
            An optional pattern-list filter can be specified to list
            the pattern of files to include.
          -->
          <compress>
            <compression>ZIP</compression>
            <filters>
              <filter>**/*-info.class</filter>
              <filter>glob:**/module-info.class</filter>
              <filter>regex:/java[a-z]+$</filter>
              <filter>@filename</filter>
            </filters>
          </compress>
          <!--
            Includes the list of locales where langtag is
            a BCP 47 language tag. This option supports locale matching as
            defined in RFC 4647.
            Ensure that you specified: ‒‒add-modules jdk.localedata when
            using this property.
          -->
          <includelocales>
            <includelocale>en</includelocale>
            <includelocale>ja</includelocale>
            <includelocale>*-IN</includelocale>
          </includelocales>
          <!--
            Orders the specified paths in priority order.
          -->
          <orderresources>
            <orderresource>**/*-info.class</orderresource>
            <orderresource>glob:**/module-info.class</orderresource>
            <orderresource>regex:/java[a-z]+$</orderresource>
            <orderresource>@filename</orderresource>
          </orderresources>
          <!--
            Specify resources to exclude.
          -->
          <excluderesources>
            <excluderesource>**/*-info.class</excluderesource>
            <excluderesource>glob:**/META-INF/**</excluderesource>
            <excluderesource>regex:/java[a-z]+$</excluderesource>
            <excluderesource>@filename</excluderesource>
          </excluderesources>
          <!--
            Strips debug information from the output image.
            Default value: false.
          -->
          <stripdebug>true</stripdebug>
          <!--
            Strip Java debug attributes from classes in the output image.
            Default value: false.
          -->
          <stripjavadebugattributes>true</stripjavadebugattributes>
          <!--
            Exclude native commands (such as java/java.exe) from the image.
            Default value: false.
          -->
          <stripnativecommands>true</stripnativecommands>
          <!--
            De-duplicate all legal notices. If true is specified then
            it will be an error if two files of the same filename
            are different.
            Default value: false.
          -->
          <deduplegalnotices>true</deduplegalnotices>
          <!--
            Specify files to exclude.
          -->
          <excludefiles>
            <excludefile>**/*-info.class</excludefile>
            <excludefile>glob:**/META-INF/**</excludefile>
            <excludefile>regex:/java[a-z]+$</excludefile>
            <excludefile>@filename</excludefile>
          </excludefiles>
          <!--
            Specify a JMOD section to exclude { MAN | HEADERS }.
          -->
          <excludejmodsection>MAN</excludejmodsection>
          <!--
            Specify a file listing the java.lang.invoke classes to pre-generate.
            By default, this plugin may use a builtin list of classes
            to pre-generate. If this plugin runs on a different runtime
            version than the image being created then code generation
            will be disabled by default to guarantee correctness add
            ignore-version=true to override this.
          -->
          <generatejliclasses>${project.basedir}/jli-classes</generatejliclasses>
          <!--
            Load release properties from the supplied option file.
            - adds: is to add properties to the release file.
            - dels: is to delete the list of keys in release file.
            - Any number of key=value pairs can be passed.
          -->
          <releaseinfo>
            <file>file</file>
            <adds>
              <key1>value1</key1>
              <key2>value2</key2>
            </adds>
            <dels>
              <key1 />
              <key2 />
            </dels>
          </releaseinfo>
          <!--
            Fast loading of module descriptors (always enabled).
            The jlink CLI is: ‒‒system-modules=retainModuleTarget.
            Default value: false.
          -->
          <systemmodules>true</systemmodules>
          <!--
            Select the HotSpot VM in
            the output image: { CLIENT | SERVER | MINIMAL | ALL }
            Default value: ALL.
          -->
          <vm>SERVER</vm>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
